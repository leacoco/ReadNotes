cd `find /home/leadel/Dokumente/ /home/leadel/Schreibtisch/ -name ReadNotes`

Bash made EASY:

ctrl + w ====> Delete last Word
ctrl + u ====> Delete the content from the current cursor bask to the start of the line OR copy
ctrl + y ====> past copied from above
alt + b and alt + f ==> move by words
ctrl + a and ctrl + e ==> move beginning or end of line
ctrl + k ==> clear to the end of line

ATOM LINE MANIPULATION:

⌘ + ] / [ Indent/outdent current line.
⌘ + enter. Insert new line after current line.
⌘ + shift + enter. Insert new line before current line.
ctrl + shift + k. Delete current line.
ctrl + ⌘ + up/down. Move current line up/down.
shift + ⌘ + d. Duplicate current line.
⌘ + j. Join current and next lines.

history
!n ==> to execute the command found in the history
NOTE: n is an integer

Typing a command on the commandline and you change your mind
alt + # ==> add # at the beginning and enter it as a comment

              THE XARGS TUTORIAL - http://www.softpanorama.org/Tools/xargs.shtml

xargs normally reads arguments from stdin. If no command is specified, default is /bin/echo
By default, xargs append the list of filenames to the end of the specified command

USAGE:
                xargs [options..] [command [initial-arguments]]

USing xargs:
  xargs is very powerful. You can control how many items executes per line ( -L )
  as well as parallelism ( -P )
NOTE: if you are note sure: do a xargs echo first

example:
  find . -name '*.py' | xargs grep <some_fundtion>
  echo hosts | xargs -I{} ssh root@{} hostname

Options:
  -n max-args: Executes the command once for every max-args arguments passed.
  -1# Executes once for every # lines of input
  - I Normally xargs places input arguments at the end of command.
    Used with -i option, xargs will replace all instance of {} with input argument.
  Example:
    find . -maxdepth 1 -type d -print | xargs -0 -I {} echo Directory:{}
  Or
  you can as well specify your own Macro substitution string
  find . -maxdepth 1 -type d -print | xargs -0 -I "^" echo Directory:"^"
 -t : echo each command before executing
 -p : prompt user before executing a command
find . -maxdepth 1 -type d -print | xargs -0 -I {} -t  -p echo Directory:{}
-L tells xargs to consider the following line as be part of the current line, not as a seperate line.

NOTES:


        One type of hard to find errors is connected with filenames that got to Unix from Windows and contain
        blanks. Because file names can contain quotes, backslashes, blank characters, and even newlines,
        it is not safe to process them using xargs  in its default mode of operation.
        Also since most files' names do not contain blanks, this problem occurs only infrequently.
        It is safer to use ‘find -print0’ or ‘find -fprint0’ and process the output by giving the ‘-0’ or ‘--null’ option to GNU xargs,
        GNU tar, GNU cpio, or perl. The locate  command also has a ‘-0’ or ‘--null’ option which does the same thing.

        find $HOME -name '*.c' -print | xargs    grep -l sprintf

        However, if the command needs to have its standard input be a terminal (less, for example),
        you have to use the shell command substitution method or use the ‘--arg-file’ option of xargs.
        The xargs  command stops if  the command exits with a status of 255 (this will cause xargs to
        issue an error message and stop). If you run script  via xrags it make sence to ensure that any
        unrecoverable error produced error code 255. In case of utilities it ma sence to write an script that can serve as envelope and ensure the same behavior.


Example using exec and xargs

    find . -type f -exec grep -iH '/bin/bash' {} \;
    find . -type f -print | xargs grep -il '/bin/bash' ==> This is much faster: Note -l in grep prints only
    the names of files with matching lines. Does not repeat the names of file when the pattern is found more than once


    This combination is useful if you need to operate on filenames with spaces. If you add option -print0  to find  command and option -0 xargs  command, you can avoid the danger to processing wrong file(s) xargs:

        find /mnt/zip -name "*prefs copy" -print0 | xargs>    -0 rm


AWK TUTORIAL ==> awk is a filter and report writer.

There are 3 variants of :
  AWK
  NAWK
  GAWK
PATTERN:
  pattern { action }

-> The pattern specifies when the action is Performed. awk is line oriented ie the pattern specifies
a test that is performed with each line read as input.

Two important patterns are specified by the keywords "BEGIN" and "END". These two keywords specify
actions to be taken before any line are read, and after the line is read.

  BEGIN { print "START" }
    { print             }
  END { print "STOP"    }

  awk '/search_pattern/ { action_to_take_on_matches; another_action; }' file_to_parse

  awk '/UUID/' /etc/fstab  ==> could be use to search in a file
  awk '/^<search_text>/' <file_name>

  The internal variables that awk uses are:

    FILENAME: References the current input file.
    FNR: References the number of the current record relative to the current input file. For instance, if you have two input files, this would tell you the record number of each file instead of as a total.
    FS: The current field separator used to denote each field in a record. By default, this is set to whitespace.
    NF: The number of fields in the current record.
    NR: The number of the current record.
    OFS: The field separator for the outputted data. By default, this is set to whitespace.
    ORS: The record separator for the outputted data. By default, this is a newline character.
    RS: The record separator used to distinguish separate records in the input file. By default, this is a newline character.

    awk 'BEGIN { action; }
    /search/ { action; }
    END { action; }' input_file

    [leadel:~/Schreibtisch … rial/regular_expression] $ awk 'BEGIN { print "Users Firstnames"; }
    /Firstname/ { print $2 ;}
    END { print "------- DONE -----------"}' testfile > firstnames

############### Some bash best practice ############################################################################

Use long options (logger --priority vs logger -p). If you're on cli, abbreviations make sense for efficiency. 
but when you're writing reusable scripts a few extra keystrokes will pay off in readability and avoid ventures into man pages in the future 
by you or your collaborators.

    Use set -o errexit (a.k.a. set -e) to make your script exit when a command fails.

    Then add || true to commands that you allow to fail.

    Use set -o nounset (a.k.a. set -u) to exit when your script tries to use undeclared variables.

    Use set -o xtrace (a.k.a set -x) to trace what gets executed. Useful for debugging.

    Use set -o pipefail in scripts to catch mysqldump fails in e.g. mysqldump |gzip. 
    The exit status of the last command that threw a non-zero exit code is returned.

    #!/usr/bin/env bash is more portable than #!/bin/bash.

    Avoid using #!/usr/bin/env bash -e (vs set -e), because when someone runs your script as bash ./script.sh, the exit on error will be ignored.

    Surround your variables with {}. Otherwise bash will try to access the $ENVIRONMENT_app variable in /srv/$ENVIRONMENT_app, 
    whereas you probably intended /srv/${ENVIRONMENT}_app.

    You don't need two equal signs when checking if [ "${NAME}" = "Kevin" ].

    Surround your variable with " in if [ "${NAME}" = "Kevin" ], because if $NAME isn't declared, bash will throw a syntax error (also see nounset).

    Use :- if you want to test variables that could be undeclared. For instance: if [ "${NAME:-}" = "Kevin" ] will set $NAME to be empty if it's not declared. You can also set it to noname like so if [ "${NAME:-noname}" = "Kevin" ]

    Set magic variables for current file, basename, and directory at the top of your script for convenience.

Summarizing, why not start your next bash script like this:

#!/usr/bin/env bash
# Bash3 Boilerplate. Copyright (c) 2014, kvz.io

set -o errexit
set -o pipefail
set -o nounset
# set -o xtrace

# Set magic variables for current file & dir
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__base="$(basename ${__file} .sh)"
__root="$(cd "$(dirname "${__dir}")" && pwd)" # <-- change this as it depends on your app

arg1="${1:-}"


